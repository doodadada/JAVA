package com.ohgiraffers.section02.variable;

public class Application3 {
    public static void main(String[] args){

        /* 수업목표 변수의 명명 규칙에 대해 이해할 수 있다. */
        /*  변수의 명명 규칙
        *   변수의 이름을 지을 때 아무렇게나 짓는 것이 아닌 정해진 규칙이 있다
        *   실무적으로는 굉장히 중요하기 때문에 반드시 숙지해야 하고
        *   또한, 규첵에 맞는 올바른 변수명을 찾는 것이 좋은 프로그래밍을 하는 첫 단추이다. */

        /*  변수의 명명 규칙
        *   1. 컴파일 에러를 발생시큰 규칙
        *       1-1. 동일한 범위 내에서 동일한 변수명을 가질 수 없다.
        *       1-2. 예약어는 사용이 불가능하다. (자바에서 미리 사용하겠다고 컴파일러와 약속한 키워드를 예약어라고 한다.)
        *       1-3. 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 구분하는 언어이다.)
        *       1-4 변수명은 숫자로 시작할 수 없다. (시작만 할 수 없고 숫자를 섞어서 사용하는 것은 가능하다.)
        *       1-5 특수기호는 '_'와 '$'만 사용가능하다.
        *   2. 컴파일 에러를 발생시키지는 않지만 개발자끼리의 암묵적인 규칙
        *       2-1. 변수명의 길이 제한은 없다(하지만 적당히 해야겠지?)
        *       2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자 두번째 시작하는 단어는 대문자로 시작한다(camel-Case)
        *       2-3. 단어와 단어 사이의 연걸은 언더스코어(_)로 사용하지 않는다( 타 언어의 네이밍 규칙이다)
        *       2-4. 한글로 변수명을 짓는 것은 가능하지만, 권장하지 않는다(한글을 취급하는 다양한 방식들이 존재하기 떄문에 에러를 유발시킬 수 있다.
        *       2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 정확하게 표현하도록 한다.
        *       2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다.
        *       2-7. 명사형으로 작성하도록 한다.
        *       2-8. boolean 형은 의문문으로 가급적 긍정형태로 네이밍한다.
        * */

                /*  목차1. 컴파일 에러를 발생시키는 규칙 */
                /*  목차 1-1. 동일한 범위 내에서 동일한 변수를 가질 수 없다. */
                int age = 20;
//              int age =30; 동일한 변수명과 타입을 가지므로 에러발생
//              String age = ""; 동일한 변수명을 가지므로 에러발생
                /*  목차 1-2. 예약어는 사용이 불가능하다. */
//              int true = 1; true는 예약어이므로 에러발생

                /*  목차 1-3. 변수명은 대/소문자를 구분한다.*/
                int Age = 20; //age와는 대/소문자 구분이 다르기에 에러발생하지 않음 (그러나 둘이 같이 있는건 2-5를 위반하니까 권장하지 않겠지?)
                boolean True = true; //True는 t가 대문자T여서 예약어와는 다르게 인식해서 에러발생하지 않음

                /*  목차 1-4. 변수명은 숫자로 시작할 수 없다.*/
//              int 1age = 10; 맨 앞에 숫자 1로 시작하기 떄문에 에러발생
                int age1 = 20; //숫자가 처음에만 시작하지 않으면 섞어서 사용도 가능하다.

                /*  목차 1-5 특수기호는 '_'와 '$'만 사용 가능하다. */
//              int a@ge = 20; //사용 가능한 특수문자 외에는 사용이 불가능
                int _age = 20; //언더스코어는 사용가능함. 처음도 가능하고 중간이나 끝에도 가능함
                int a$ge = 20;

                /*  2. 컴파일 에러를 발생시키지는 않지만 개발자들끼리의 암묵적인 규칙 */
                /*  목차 2-1 변수명의 길이제한은 없다. 하지만 적당히 하자.*/
                int asfemnbklhhijgafjlbdaslgalfshadlfhsdafldsafhlksdaahflds;

                /*  목차 2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자 두 번째 시작 단어는 대문자로 시작한다.*/
                /*  자바에서는 클래스명만 유일하게 대문자로 시작한다. */
                int maxAge = 20; //max와 age의 합성어이므로 두번째 단어 age의 시작 단어 a를 A로 입력한다.
                int minAge = 20; //min과 age의 합성어이므로 두번째 단어 age의 시작 단어 a를 A로 입력한다.

                /*  목차 2-3. 단어와 단어 사이는 언더스코어(_)로 하지 않는다. */
                String user_name; // 에러발생하진 않지만 이렇게 하면 안된다.
                String userName; // 올바른 표기법

                /*  목차 2-4. 한글로 변수명을 짓는 것이 가능하지만 권장하지 않는다(매우!!)*/
                int 나이;

                /*  목차 2-5 변수 안에 저장된 값이 어떤 의미를 가지는지 정확하게 표현하도록 한다. */
                String s; //s가 뭔데?!?!?!!@!@!@!@!
                String name; //아 이름이구나~(??:근데 무슨이름?)

                /*  목차 2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다.*/
                int sum = 0;
                int max = 0;
                int min = 0;
                int count = 0;

                /*  목차 2-7. 명사형으로 작성할 수 있도록 한다. */
                String gohome; //가능하긴 하지만 가급적 명사형으로 짓는다.
                String home;

                /*  목차 2-8. boolean형은 의문문으로 가급적 긍정형태로 네이밍한다. */
                boolean isAlive = true; //긍정적
                boolean isDead = false; //부정적 표현은 권장하지 않는다.

    }

}
